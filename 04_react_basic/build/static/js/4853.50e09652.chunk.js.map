{"version":3,"file":"static/js/4853.50e09652.chunk.js","mappings":"+JA+BA,UA1BmB,WAEjB,IAEeA,EAFTC,EAAQ,aAGRC,GAAMC,EAAAA,EAAAA,KAAA,MAAAC,SAAI,cAIhB,OAFAC,QAAQC,IAAIJ,IAIVK,EAAAA,EAAAA,MAAA,OAAKC,UAAWP,EAAMQ,cAAcL,SAAA,EAElCD,EAAAA,EAAAA,KAAA,MAAAC,SAAK,SAAWH,KAEhBE,EAAAA,EAAAA,KAAA,MAAAC,SAZS,CAAC,QAAS,QAAS,YAc5BD,EAAAA,EAAAA,KAAA,MAAAC,UAbWJ,EAaA,QAbG,GAAAU,OAAQV,EAAG,iBAexBG,EAAAA,EAAAA,KAAA,MAAAC,SAAI,cAEJF,IAGP,C,8BC5BA,WAAiB,C","sources":["080_expr_in_jsx/end/components/Expression.js","webpack://react-app-template/./src/080_expr_in_jsx/end/components/Expression.css?7d20"],"sourcesContent":["/* POINT JSX には JavaScript 式を記述できる\nJSX 内の 波括弧 {...} で囲んだ部分は JavaScript 式として実行時に評価されます。\n */\nimport \"./Expression.css\";\n\nconst Expression = () => {\n  \n  const title = \"Expression\";\n  const arry = [\"item1\", \"item2\", \"item3\"];\n  const hello = (arg) => `${arg} Function`;\n  const jsx = <h3>Hello JSX</h3>;\n  \n  console.log(jsx);\n\n  return (\n    // POINT {...} は属性値にも使用できます。\n    <div className={title.toLowerCase()}>\n      {/* POINT 波括弧内は実行時に評価されます。 */}\n      <h3>{\"Hello \" + title}</h3>\n      {/* POINT 配列を子要素に指定すると配列の要素が値の列として展開されます。 */}\n      <h3>{arry}</h3>\n      {/* POINT 関数を呼び出して return した値を埋め込むこともできます。 */}\n      <h3>{hello(\"Hello\")}</h3>\n      {/* POINT 波括弧内に JSX を記述することもできます。*/}\n      {<h3>Hello JSX</h3>}\n      {/* POINT 変数に代入したJSXも埋め込めます。 */}\n      {jsx}\n    </div>\n  );\n};\n\nexport default Expression;\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["arg","title","jsx","_jsx","children","console","log","_jsxs","className","toLowerCase","concat"],"sourceRoot":""}